// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for Yann Garcia (yann@Ubuntu64) on Wed Feb 15 15:41:26 2017

// Copyright (c) 2000-2016 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef UDPasp__PortType_HH
#define UDPasp__PortType_HH

#ifndef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated with -R option but -DTITAN_RUNTIME_2 was not used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "UDPasp_Types.hh"
#include "UDPasp_PT.hh"

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef UDPasp__PortType_HH
#endif

namespace UDPasp__PortType {

/* Forward declarations of classes */

class UDPasp__PT;

} /* end of namespace */

#ifndef UDPasp__PortType_HH
#define UDPasp__PortType_HH

namespace UDPasp__PortType {

/* Class definitions */

class UDPasp__PT : public UDPasp__PT_PROVIDER {
enum msg_selection { MESSAGE_0, MESSAGE_1, MESSAGE_2 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
UDPasp__Types::ASP__UDP__open__result *message_0;
UDPasp__Types::ASP__UDP *message_1;
UDPasp__Types::ASP__UDP__message *message_2;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
UDPasp__PT(const char *par_port_name = NULL);
~UDPasp__PT();
void send(const UDPasp__Types::ASP__UDP__open& send_par, const COMPONENT& destination_component);
void send(const UDPasp__Types::ASP__UDP__open& send_par);
void send(const UDPasp__Types::ASP__UDP__open_template& send_par, const COMPONENT& destination_component);
void send(const UDPasp__Types::ASP__UDP__open_template& send_par);
void send(const UDPasp__Types::ASP__UDP__close& send_par, const COMPONENT& destination_component);
void send(const UDPasp__Types::ASP__UDP__close& send_par);
void send(const UDPasp__Types::ASP__UDP__close_template& send_par, const COMPONENT& destination_component);
void send(const UDPasp__Types::ASP__UDP__close_template& send_par);
void send(const UDPasp__Types::ASP__UDP& send_par, const COMPONENT& destination_component);
void send(const UDPasp__Types::ASP__UDP& send_par);
void send(const UDPasp__Types::ASP__UDP_template& send_par, const COMPONENT& destination_component);
void send(const UDPasp__Types::ASP__UDP_template& send_par);
void send(const UDPasp__Types::ASP__UDP__message& send_par, const COMPONENT& destination_component);
void send(const UDPasp__Types::ASP__UDP__message& send_par);
void send(const UDPasp__Types::ASP__UDP__message_template& send_par, const COMPONENT& destination_component);
void send(const UDPasp__Types::ASP__UDP__message_template& send_par);
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const UDPasp__Types::ASP__UDP__open__result_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const UDPasp__Types::ASP__UDP__open__result_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const UDPasp__Types::ASP__UDP__open__result_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const UDPasp__Types::ASP__UDP_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const UDPasp__Types::ASP__UDP_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const UDPasp__Types::ASP__UDP_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const UDPasp__Types::ASP__UDP__message_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const UDPasp__Types::ASP__UDP__message_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const UDPasp__Types::ASP__UDP__message_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
private:
void incoming_message(const UDPasp__Types::ASP__UDP__open__result& incoming_par, component sender_component);
void incoming_message(const UDPasp__Types::ASP__UDP& incoming_par, component sender_component);
void incoming_message(const UDPasp__Types::ASP__UDP__message& incoming_par, component sender_component);
protected:
void incoming_message(const UDPasp__Types::ASP__UDP__open__result& incoming_par);
void incoming_message(const UDPasp__Types::ASP__UDP& incoming_par);
void incoming_message(const UDPasp__Types::ASP__UDP__message& incoming_par);
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Global variable declarations */

extern TTCN_Module module_object;

} /* end of namespace */

#endif
