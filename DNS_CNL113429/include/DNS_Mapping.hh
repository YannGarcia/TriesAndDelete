// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for Yann Garcia (yann@Ubuntu64) on Wed Feb 15 15:41:26 2017

// Copyright (c) 2000-2016 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef DNS__Mapping_HH
#define DNS__Mapping_HH

#ifndef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated with -R option but -DTITAN_RUNTIME_2 was not used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "DNS_Types.hh"
#include "UDPasp_PortType.hh"

#if TTCN3_VERSION != 60100
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef DNS__Mapping_HH
#endif

namespace DNS__Mapping {

/* Forward declarations of classes */

class ASP__UDP__DNS;
class ASP__UDP__DNS_template;
class UDPasp__DNS__SP__PT;

} /* end of namespace */

#ifndef DNS__Mapping_HH
#define DNS__Mapping_HH

namespace DNS__Mapping {

/* Type definitions */

typedef COMPONENT DNS__mapping__CT;
typedef COMPONENT_template DNS__mapping__CT_template;

/* Class definitions */

class ASP__UDP__DNS : public Record_Type {
  DNS__Types::PDU__DNS field_dnsMessage;
  OPTIONAL<BOOLEAN> field_compressDomainNames;
  OPTIONAL<BOOLEAN> field_autoLengthCalc;
  CHARSTRING field_udpAddress;
  INTEGER field_udpPort;
  Base_Type* fld_vec[5];
  void init_vec();
public:
  ASP__UDP__DNS();
  ASP__UDP__DNS(const ASP__UDP__DNS& other_value);
  ASP__UDP__DNS(const DNS__Types::PDU__DNS& par_dnsMessage,
    const OPTIONAL<BOOLEAN>& par_compressDomainNames,
    const OPTIONAL<BOOLEAN>& par_autoLengthCalc,
    const CHARSTRING& par_udpAddress,
    const INTEGER& par_udpPort);
inline ASP__UDP__DNS& operator=(const ASP__UDP__DNS& other_value) { set_value(&other_value); return *this; }

inline boolean operator==(const ASP__UDP__DNS& other_value) const { return is_equal(&other_value); }
  inline boolean operator!=(const ASP__UDP__DNS& other_value) const
    { return !is_equal(&other_value); }

  inline DNS__Types::PDU__DNS& dnsMessage()
    {return field_dnsMessage;}
  inline const DNS__Types::PDU__DNS& dnsMessage() const
    {return field_dnsMessage;}
  inline OPTIONAL<BOOLEAN>& compressDomainNames()
    {return field_compressDomainNames;}
  inline const OPTIONAL<BOOLEAN>& compressDomainNames() const
    {return field_compressDomainNames;}
  inline OPTIONAL<BOOLEAN>& autoLengthCalc()
    {return field_autoLengthCalc;}
  inline const OPTIONAL<BOOLEAN>& autoLengthCalc() const
    {return field_autoLengthCalc;}
  inline CHARSTRING& udpAddress()
    {return field_udpAddress;}
  inline const CHARSTRING& udpAddress() const
    {return field_udpAddress;}
  inline INTEGER& udpPort()
    {return field_udpPort;}
  inline const INTEGER& udpPort() const
    {return field_udpPort;}
Base_Type* clone() const { return new ASP__UDP__DNS(*this); }
const TTCN_Typedescriptor_t* get_descriptor() const;
boolean is_set() const { return FALSE; }
Base_Type* get_at(int index_value) { return fld_vec[index_value]; }
const Base_Type* get_at(int index_value) const { return fld_vec[index_value]; }

int get_count() const { return 5; }
int optional_count() const { return 2; }
boolean default_as_optional() const { return TRUE; }
static const TTCN_Typedescriptor_t* fld_descriptors[];
const TTCN_Typedescriptor_t* fld_descr(int p_index) const;

static const char* fld_names[];
const char* fld_name(int p_index) const;

static const int optional_indexes[];
const int* get_optional_indexes() const;

boolean can_start_v(const char *, const char *, XERdescriptor_t const&, unsigned int, unsigned int)
{ return FALSE; }
};

class ASP__UDP__DNS_template : public Record_Template {
void set_specific();
public:
ASP__UDP__DNS_template(): Record_Template() {}
ASP__UDP__DNS_template(template_sel other_value): Record_Template(other_value) {}
ASP__UDP__DNS_template(const ASP__UDP__DNS& other_value): Record_Template() { copy_value(&other_value); }
ASP__UDP__DNS_template(const OPTIONAL<ASP__UDP__DNS>& other_value): Record_Template() { copy_optional(&other_value); }
ASP__UDP__DNS_template(const ASP__UDP__DNS_template& other_value): Record_Template() { copy_template(other_value); }
ASP__UDP__DNS_template& operator=(template_sel other_value);
ASP__UDP__DNS_template& operator=(const ASP__UDP__DNS& other_value);
ASP__UDP__DNS_template& operator=(const OPTIONAL<ASP__UDP__DNS>& other_value);
ASP__UDP__DNS_template& operator=(const ASP__UDP__DNS_template& other_value);
inline boolean match(const ASP__UDP__DNS& other_value, boolean legacy = FALSE) const { return matchv(&other_value, legacy); }
inline void log_match(const ASP__UDP__DNS& match_value, boolean legacy = FALSE) const { log_matchv(&match_value, legacy); }
ASP__UDP__DNS valueof() const;
inline ASP__UDP__DNS_template& list_item(int list_index) const { return *(static_cast<ASP__UDP__DNS_template*>(get_list_item(list_index))); }
DNS__Types::PDU__DNS_template& dnsMessage();
const DNS__Types::PDU__DNS_template& dnsMessage() const;
BOOLEAN_template& compressDomainNames();
const BOOLEAN_template& compressDomainNames() const;
BOOLEAN_template& autoLengthCalc();
const BOOLEAN_template& autoLengthCalc() const;
CHARSTRING_template& udpAddress();
const CHARSTRING_template& udpAddress() const;
INTEGER_template& udpPort();
const INTEGER_template& udpPort() const;
Record_Template* create() const { return new ASP__UDP__DNS_template; }
const TTCN_Typedescriptor_t* get_descriptor() const;
const char* fld_name(int p_index) const;
};

class UDPasp__DNS__SP__PT : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
ASP__UDP__DNS *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
UDPasp__DNS__SP__PT(const char *par_port_name = NULL);
~UDPasp__DNS__SP__PT();
void send(const ASP__UDP__DNS& send_par, const COMPONENT& destination_component);
void send(const ASP__UDP__DNS& send_par);
void send(const ASP__UDP__DNS_template& send_par, const COMPONENT& destination_component);
void send(const ASP__UDP__DNS_template& send_par);
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const ASP__UDP__DNS_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const ASP__UDP__DNS_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const ASP__UDP__DNS_template& value_template, Value_Redirect_Interface *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
private:
void incoming_message(const ASP__UDP__DNS& incoming_par, component sender_component);
protected:
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Function prototypes */

extern void f__DNS__mapping__behaviour();
extern void start_f__DNS__mapping__behaviour(const COMPONENT& component_reference);

/* Global variable declarations */

extern const TTCN_Typedescriptor_t ASP__UDP__DNS_udpAddress_descr_;
extern const TTCN_Typedescriptor_t ASP__UDP__DNS_udpPort_descr_;
extern const TTCN_Typedescriptor_t ASP__UDP__DNS_descr_;
extern const TTCN_Typedescriptor_t ASP__UDP__DNS_compressDomainNames_descr_;
extern const TTCN_Typedescriptor_t ASP__UDP__DNS_autoLengthCalc_descr_;
extern const TTCN_Typedescriptor_t& DNS__mapping__CT_descr_;
extern UDPasp__DNS__SP__PT DNS__mapping__CT_component_UDP__DNS__PCO;
extern UDPasp__PortType::UDPasp__PT DNS__mapping__CT_component_UDP__PCO;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
