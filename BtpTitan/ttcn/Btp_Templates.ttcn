module Btp_Templates {
	
  import from Btp_TypesAndValues all;
  import from Btp_TestSystem all;
	
  group btpPrimitivesTemplates {

    template BtpInd mw_btpInd(
			      template (present) BtpPacket p_btpPkt
			      ) := {
    msgIn := p_btpPkt
    }
    
  } // btpPrimitivesTemplates
    
  group btpPduTemplates {
        
    /**
     * @desc    Receive template for BTP-A packet
     * @param   p_destPort  Destination port
     * @param   p_srcPort   Source port
     * @param   p_payload   Payload
     */
    template BtpPacket mw_btpA (
				template (present) BtpPortId   p_destPort,
				template (present) BtpPortId   p_srcPort,
				template BtpPayload  p_payload
				) := {
    header := { 
      btpAHeader := {
	destinationPort := p_destPort, 
	sourcePort := p_srcPort
      }
    }, 
    payload := p_payload
    }

    /**
     * @desc    Receive template for BTP-B packet
     * @param   p_destPort      Destination port 
     * @param   p_destPortInfo  Destination port information
     * @param   p_payload       Payload
     */
    template BtpPacket mw_btpB (	
				template (present) BtpPortId   p_destPort,
				template (present) BtpPortInfo p_destPortInfo,
				template BtpPayload  p_payload
					) := {
    header := { 
      btpBHeader := {
	destinationPort := p_destPort, 
	destinationPortInfo := p_destPortInfo
      }
    }, 
    payload := p_payload
    }

    template (present) Frame mw_frame(
                                      template (present) Oct1 p_protocol_version := ?,
                                      template (present) Oct1 p_message_id := ?,
                                      template (present) Oct4 p_station_id := ?,
                                      template (present) octetstring p_data_stream := ?
    ) := {
      protocol_version  := p_protocol_version,
      message_id        := p_message_id,
      station_id        := p_station_id,
      data_stream       := p_data_stream
    }

  } // end btpPduTemplates
    
}
