module Btp_TypesAndValues {

  const integer c_uInt16Max := 65535;
  type integer  UInt16 (0 .. c_uInt16Max) with {variant "unsigned 16 bit"};
  type octetstring Oct1  length(1) with { variant "" encode "length(1)" };
  type octetstring Oct2  length(2) with { variant "" encode "length(2)" };
  type octetstring Oct4  length(4) with { variant "" encode "length(4)" };
  
  group btpPdus {
     
    /**
     * @desc BTP Packet
     * @see ETSI TS 102 636-5-1 chapter 6
     * @member header
     * @member payload
     */
    type record BtpPacket {
      BtpHeader      header,
      BtpPayload     payload optional
      }
        
  } // End of group btpPdus
    
  group btpHeaders {
        
    /**
     * @desc BTP Header
     * @see ETSI TS 102 636-5-1 chapter 7.1
     * @member btpAHeader
     * @member btpBHeader
     */
    type union BtpHeader {
      BtpAHeader btpAHeader,
      BtpBHeader btpBHeader 
    }

    /**
     * @desc BTP-A Header
     * @see ETSI TS 102 636-5-1 chapter 7.2
     * @member destinationPort
     * @member sourcePort
     */        
    type record BtpAHeader {
      BtpPortId destinationPort,
      BtpPortId sourcePort   
    } 

    /**
     * @desc BTP-B Header
     * @see ETSI TS 102 636-5-1 chapter 7.3
     * @member destinationPort
     * @member destinationPortInfo
     */        
    type record BtpBHeader {
      BtpPortId destinationPort,
      BtpPortInfo destinationPortInfo   
    } 
    
    /**
     * @desc BTP Port ID
     * @see ETSI TS 102 636-5-1 chapter 7.3.2
     */ 
    type UInt16 BtpPortId;

    /**
     * @desc BTP-B Port info
     * @see ETSI TS 102 636-5-1 chapter 7.3.2
     */ 
    type UInt16 BtpPortInfo;
        
  } // End of group btpHeaders
    
  group btpPayload {
        
    type octetstring BtpRawPayload;
        
    /**
     * @desc The payload of the BTP packet
     * @member decodedPayload The decoded payload
     * @member rawPayload Raw payload as it is received
     */
    type record BtpPayload {
      DecodedBtpPayload decoded_payload optional,
      BtpRawPayload raw_payload
    }
    
    type record Frame
    {
      Oct1 protocol_version,
      Oct1 message_id,
      Oct4 station_id,
      octetstring data_stream
    }
        
    /**
     * @desc The decoded payload of the BTP packet
     * @member camPacket The CAM packet
     * @member denmPacket The DENM packet
     * @member mapemPacket
     * @member spatemPacket
     * @member ivimPacket
     * @member sremPacket
     * @member seemPacket
     */
    type union DecodedBtpPayload {
      octetstring raw_payload
    }
     
  } // End of btpPayload

} with { 
    variant ""; // Yann: Mandatory!
    encode "RAW" 
}
