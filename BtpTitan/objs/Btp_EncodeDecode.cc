// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R1A
// for Yann Garcia (yann@Ubuntu64) on Tue Feb 28 11:22:00 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "Btp_EncodeDecode.hh"

namespace Btp__EncodeDecode {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x83, 0x59, 0x2b, 0x31, 0x84, 0xae, 0x96, 0xeb, 0xfd, 0x4b, 0xdc, 0x07, 0xde, 0xd5, 0xa9, 0x7c };

/* Global variable definitions */

TTCN_Module module_object("Btp_EncodeDecode", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_1,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_2);

/* Bodies of functions, altsteps and testcases */

OCTETSTRING fx__enc__BtpReq(const Btp__TestSystem::BtpReq& pdu)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("fx_enc_BtpReq(): Encoding @Btp_TestSystem.BtpReq: ");
pdu.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
pdu.encode(Btp__TestSystem::BtpReq_descr_, ttcn_buffer, TTCN_EncDec::CT_RAW);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("fx_enc_BtpReq(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

Btp__TestSystem::BtpInd fx__dec__BtpInd(const OCTETSTRING& stream)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("fx_dec_BtpInd(): Stream before decoding: ");
stream.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(stream);
Btp__TestSystem::BtpInd ret_val;
ret_val.decode(Btp__TestSystem::BtpInd_descr_, ttcn_buffer, TTCN_EncDec::CT_RAW);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("fx_dec_BtpInd(): Decoded @Btp_TestSystem.BtpInd: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()-1 && TTCN_Logger::log_this_event(TTCN_WARNING)) {
ttcn_buffer.cut();
OCTETSTRING remaining_stream;
ttcn_buffer.get_string(remaining_stream);
TTCN_Logger::begin_event(TTCN_WARNING);
TTCN_Logger::log_event_str("fx_dec_BtpInd(): Warning: Data remained at the end of the stream after successful decoding: ");
remaining_stream.log();
TTCN_Logger::end_event();
}
}
return ret_val;
}

INTEGER fx__dec__BtpInd__backtrack(const OCTETSTRING& stream, Btp__TestSystem::BtpInd& pdu)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("fx_dec_BtpInd_backtrack(): Stream before decoding: ");
stream.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(stream);
pdu.decode(Btp__TestSystem::BtpInd_descr_, ttcn_buffer, TTCN_EncDec::CT_RAW);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("fx_dec_BtpInd_backtrack(): Decoded @Btp_TestSystem.BtpInd: ");
pdu.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()-1 && TTCN_Logger::log_this_event(TTCN_WARNING)) {
ttcn_buffer.cut();
OCTETSTRING remaining_stream;
ttcn_buffer.get_string(remaining_stream);
TTCN_Logger::begin_event(TTCN_WARNING);
TTCN_Logger::log_event_str("fx_dec_BtpInd_backtrack(): Warning: Data remained at the end of the stream after successful decoding: ");
remaining_stream.log();
TTCN_Logger::end_event();
}
return 0;
} else {
return 1;
}
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("../ttcn/Btp_EncodeDecode.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "Btp_EncodeDecode");
Btp__TestSystem::module_object.pre_init_module();
module_object.add_function("fx_enc_BtpReq", (genericfunc_t)&fx__enc__BtpReq, NULL);
module_object.add_function("fx_dec_BtpInd", (genericfunc_t)&fx__dec__BtpInd, NULL);
module_object.add_function("fx_dec_BtpInd_backtrack", (genericfunc_t)&fx__dec__BtpInd__backtrack, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("../ttcn/Btp_EncodeDecode.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "Btp_EncodeDecode");
Btp__TestSystem::module_object.post_init_module();
}


} /* end of namespace */
